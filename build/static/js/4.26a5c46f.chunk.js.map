{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","shared/utility.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","placeholder","type","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","InputChangeHandler","event","inputID","target","checkValidity","setState","SwitchAuthenticationMode","preventDefault","prevState","SubmitHandler","props","onSubmitForm","this","building","authRedirectPath","onChangeAuthRedirect","authFormArr","key","push","id","config","form","map","input","isInvalid","shouldValidate","changed","loading","error","message","redirect","isAuthenticated","to","className","classes","Auth_Form","onSubmit","buttonclass","style","marginTop","clicked","Component","connect","auth","token","isBuildingBurger","burgerBuilder","redirectPath","dispatch","actions","Input","inputClasses","join","onChange","options","option","displayedValue","label","rules","isValid","trim","maxLength","length","test","isNumeric"],"mappings":"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","file":"static/js/4.26a5c46f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Auth_Form\":\"Auth_Auth_Form__30sxw\"};","import ButtonComponent from '../../components/UI/Button/Button'\nimport InputComponent from '../../components/UI/Input/Input'\nimport React ,{ Component } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport classes from './Auth.module.css'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport { Redirect } from 'react-router-dom'\nimport { checkValidity } from '../../shared/utility'\n\nclass Auth extends Component {\n\n    state = {\n        controls : {\n            email: {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Email',\n                    type : 'email'\n                },\n                value :'',\n                validation : { \n                    required : true,\n                    isEmail : true\n                },\n                valid : false,\n                touched : false\n            },\n            password: {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Password',\n                    type : 'password'\n                },\n                value :'',\n                validation : { \n                    required : true,\n                    minLength : 6\n                },\n                valid : false,\n                touched : false\n            }\n        },\n        isSignUp : true \n    }\n\n    conmponentDidMount(){\n        if( !this.props.building && this.props.authRedirectPath !== 'checkout'){\n            this.props.onChangeAuthRedirect()\n        }\n    }\n\n    \n    InputChangeHandler = ( event , inputID) => {\n            const controls = {\n                ...this.state.controls,\n                [inputID]: {\n                    ...this.state.controls[inputID],\n                    value : event.target.value,\n                    valid : checkValidity(event.target.value ,this.state.controls[inputID].validation ),\n                    touched : true\n                }\n            }\n           \n            this.setState({controls})\n    }\n\n    SwitchAuthenticationMode = (event) => {\n        event.preventDefault()\n        this.setState( prevState => {\n            return { isSignUp : !prevState.isSignUp}\n        })\n    }\n\n    SubmitHandler = (event) => {\n        event.preventDefault()    \n        this.props.onSubmitForm( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp )\n    }\n\n    render(){\n        let authFormArr =  [];\n\n        for ( let key in this.state.controls){\n            authFormArr.push({\n                id : key,\n                config : {...this.state.controls[key]}\n            })\n        }\n\n        let form = authFormArr.map( input =>  <InputComponent\n                                                    key={input.id} \n                                                    elementConfig={input.config.elementConfig}  \n                                                    elementType={input.config.elementType} \n                                                    value={input.config.value}\n                                                    isInvalid={!input.config.valid}\n                                                    touched={input.config.touched}\n                                                    shouldValidate={input.config.validation}\n                                                    changed={ (event) => this.InputChangeHandler(event, input.id) } />)\n        // check loading state\n        if( this.props.loading ){\n            form = <Spinner />\n        }\n\n        // check error\n        let error = null\n        if( this.props.error ){\n            error  = (<p>{this.props.error.message}</p>)\n        }\n        // redirect back to home once the user is Authenticated\n        let redirect = null;\n        if( this.props.isAuthenticated ){\n            redirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return(\n          \n            <div className={classes.Auth}>\n                {redirect}\n                {error}\n                <form className={classes.Auth_Form} onSubmit={this.SubmitHandler}>\n                    { form }\n                    <ButtonComponent \n                        buttonclass=\"Success\">\n                       Submit\n                    </ButtonComponent>\n                    <br/>\n                    <br/>\n                    <ButtonComponent style={{ marginTop: '20px'}}\n                        clicked={this.SwitchAuthenticationMode}\n                        buttonclass=\"Success\">\n                        {this.state.isSignUp ? \"Sign In\" : \"Sign Up\"}\n                    </ButtonComponent>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading : state.auth.loading,\n        error : state.auth.error,\n        isAuthenticated : state.auth.token !== null,\n        isBuildingBurger : state.burgerBuilder.building,\n        authRedirectPath : state.auth.redirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSubmitForm : ( email , password , isSignUp ) => dispatch( actions.Authenticate( email , password , isSignUp) ),\n        onChangeAuthRedirect: () => dispatch( actions.authSetRedirectPath('/'))\n    }\n}\n\nexport default connect( mapStateToProps , mapDispatchToProps)(Auth)","import React from 'react';\nimport './Input.css';\n\n// The user must pass the atributes the desire to use\nconst Input = (props) => {\n    let input = null;\n    let inputClasses = ['Input','InputElement'];\n    // add the invalid class if an input is invalid\n    if( props.isInvalid && props.shouldValidate && props.touched ){\n        inputClasses.push('Invalid');\n    }\n\n    switch(props.elementType){\n        case('input'):\n            input = <input \n                        className={inputClasses.join(\" \")}\n                        {...props.elementConfig} \n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n        case('textarea'):\n            input = <textarea \n                        className={inputClasses.join(\" \")}\n                        {...props.elementConfig}\n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n        case('select'):\n            input = <select\n                        className={inputClasses.join(\" \")}  \n                        value={props.value}\n                        onChange={props.changed}>\n                        {\n                            props.elementConfig.options.map( option => (\n                                                                <option \n                                                                    key={option.value}\n                                                                    value={option.value}>\n                                                                        {option.displayedValue}\n                                                                </option>)\n                                                            )\n                        }\n                    </select>;\n        break;\n        default:\n            input = <input \n                        className={inputClasses.join(\" \")} \n                        {...props.elementConfig}\n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n    }\n\n    return(\n        <div className=\"Input\">\n            <label className=\"Label\">{props.label}</label>\n            {input}\n        </div>\n    )\n}\n\nexport default Input;","\n    export const checkValidity = ( value , rules ) => {\n        let isValid = true;\n        if( rules.required ){\n            isValid = value.trim() !== '' && isValid; // making sure that all the required conditions are true\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength  && isValid;\n           \n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength  && isValid;\n        }\n\n        if( rules.isEmail ){\n            const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n            isValid = pattern.test( value ) && isValid\n        }\n        // check for numeric characters\n        if ( rules.isNumeric ) {\n            const pattern = /^\\d+$/\n            isValid =  pattern.test(value) && isValid \n        }\n\n        return isValid;\n    }\n"],"sourceRoot":""}