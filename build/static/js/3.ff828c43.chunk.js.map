{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","shared/utility.js"],"names":["connect","state","ingred","burgerBuilder","ingredients","props","className","style","width","margin","Burger","Button","buttonclass","clicked","checkoutcontinued","checkoutcanceled","ContactData","orderForm","name","elementType","elementConfig","placeholder","type","value","validation","required","valid","touched","email","address","street","postalcode","minLength","maxLength","country","deliveryMethod","options","displayedValue","formIsValid","loading","purchased","showAlert","PostOrder","event","preventDefault","orderData","inputelement","order","userId","price","createDate","Date","onBurgerOrdered","token","inputChangeHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","setState","orderFormArr","key","this","push","id","config","form","onSubmit","map","input","Input","isInvalid","shouldValidate","changed","disabled","Spinner","Component","totalPrice","orderSuccess","auth","dispatch","actions","withErrorHandler","axiosOrders","Checkout","checkoutContinuedHandler","history","replace","checkoutCanceledHandler","goBack","summary","to","purchaseRedirect","path","component","inputClasses","join","onChange","option","label","rules","isValid","trim","length","isEmail","test","isNumeric"],"mappings":"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","file":"static/js/3.ff828c43.chunk.js","sourcesContent":["import React from 'react';\nimport './CheckoutSummary.css';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport {connect} from 'react-redux'\n\n\nconst CheckoutSummary = (props) => {\n    return(\n        <div className=\"CheckoutSummary\">\n            <h1> We Hope it tastes Good</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingred}/>\n            </div>\n            <Button \n                buttonclass=\"Success\"  \n                clicked={props.checkoutcontinued}>\n                Continue\n            </Button>\n            <Button \n                buttonclass=\"Danger\" \n                clicked={props.checkoutcanceled}>\n                Cancel\n            </Button>\n        </div>\n    )\n}\n\nconst mapStateTopProps = state => {\n    return {\n        ingred : state.burgerBuilder.ingredients\n    }\n}\nexport default connect(mapStateTopProps)(CheckoutSummary);","import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axiosOrders from '../../../axios/axiosOrders';\nimport Input from '../../../components/UI/Input/Input';\nimport './ContactData.css';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\nimport * as actions from '../../../store/actions/index';\nimport { connect } from 'react-redux'\nimport { checkValidity } from '../../../shared/utility'\nclass ContactData extends Component {\n    state = {\n        orderForm : {\n            name: {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Name',\n                    type : 'text'\n                },\n                value :'',\n                validation : { \n                    required : true\n                },\n                valid : false,\n                touched : false\n\n            },\n            email : {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Email',\n                    type : 'email'\n                },\n                value :'',\n                validation : { \n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            address : {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Address',\n                    type : 'text'\n                },\n                value :'',\n                validation : { \n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            street : {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Street Name',\n                    type : 'text'\n                },\n                value : '',\n                validation : { \n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            postalcode : {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'ZIP Code',\n                    type : 'text'\n                },\n                value :'',\n                validation : { \n                    required : true,\n                    minLength : 4,\n                    maxLength : 8\n                },\n                valid : false,\n                touched : false\n            },\n            country : {\n                elementType : 'input',\n                elementConfig : {\n                    placeholder : 'Enter your Country',\n                    type : 'text'\n                },\n                value :'',\n                validation : { \n                    required : true\n                },\n                valid : false,\n                touched : false\n            },\n            deliveryMethod : {\n                elementType : 'select',\n                elementConfig : {\n                   options :[\n                       { value : 'cheapest' , displayedValue : 'Cheapest'},\n                       { value : 'fastest' , displayedValue : 'Fastest'}\n                   ]\n                },\n                validation : {},\n                value :'cheapest',\n                valid : true\n            }\n        },\n        formIsValid : false ,\n        loading : false,\n        purchased : false,\n        showAlert : false\n    }\n\n    PostOrder = (event) => {\n        event.preventDefault();\n        // this.setState({loading: true , purchased: true });\n        // assign key value pairs\n        const orderData = {};\n        for( let inputelement in this.state.orderForm ){\n            orderData[inputelement] = this.state.orderForm[inputelement].value;\n        }\n        \n        const order = {\n            userId : this.props.userId,\n            ingredients : this.props.ingred,\n            price : this.props.price,\n            orderData : orderData,\n            createDate : new Date()\n        }\n\n        this.props.onBurgerOrdered(order ,this.props.token)\n    }\n\n\n    inputChangeHandler = (event , inputIdentifier) => {\n        // do a clone of the first level \n        const updatedForm = {...this.state.orderForm};\n        const updatedFormElement = {...updatedForm[inputIdentifier]};\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity( updatedFormElement.value , updatedFormElement.validation );\n        updatedFormElement.touched = true;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        // check that the whole form is valid\n        let formIsValid = true;\n        for( let inputIdentifier in updatedForm ) {\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({ orderForm : updatedForm ,formIsValid :formIsValid})\n    }\n\n    render(){\n\n        let orderFormArr =  [];\n        for ( let key in this.state.orderForm){\n            orderFormArr.push({\n                id : key,\n                config : {...this.state.orderForm[key]}\n            })\n        }\n\n        \n        let form = (\n            <form onSubmit={this.PostOrder}>\n               {orderFormArr.map( input => <Input\n                                                key={input.id} \n                                                elementConfig={input.config.elementConfig}  \n                                                elementType={input.config.elementType} \n                                                value={input.config.value}\n                                                isInvalid={!input.config.valid}\n                                                touched={input.config.touched}\n                                                shouldValidate={input.config.validation}\n                                                changed={ (event) => this.inputChangeHandler(event, input.id) } /> )}\n                                            \n            <Button disabled={!this.state.formIsValid} buttonclass=\"Success\"> Submit </Button>\n            </form>\n        );\n\n        let orderSuccess = null\n        if( this.props.loading ) form = <Spinner />\n\n        return(\n            <>\n                { orderSuccess }\n                <div className=\"ContactData\">\n                    <h1> Enter Your Contact Details</h1>\n                    { form }\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingred : state.burgerBuilder.ingredients,\n        price : state.burgerBuilder.totalPrice,\n        loading : state.order.loading,\n        orderSuccess : state.order.orderSuccess,\n        token : state.auth.token,\n        userId : state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onBurgerOrdered : ( orderData, token ) =>  dispatch( actions.purchaseBurger(orderData, token) )\n    }\n}\n  \n\n\nexport default connect(mapStateToProps , mapDispatchToProps)(withErrorHandler(ContactData,axiosOrders));","import React, { Component } from 'react';\nimport {Route ,Redirect} from 'react-router-dom';\n// components\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from '../Checkout/ContactData/ContactData';\nimport {connect} from 'react-redux'\nimport './Checkout.css';\n\nclass Checkout extends Component {\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n \n    checkoutCanceledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    render(){\n        let summary = <Redirect to='/' />\n        if( this.props.ingred ) {\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n            summary = (\n                <div className=\"Checkout\">\n                    {purchaseRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ingred}\n                        checkoutcontinued={this.checkoutContinuedHandler}\n                        checkoutcanceled={this.checkoutCanceledHandler} />\n                        <div className=\"ContactDetails\">\n                            <Route path=\"/checkout/contact-data\" component={ContactData} /> \n                        </div>\n                </div>\n            )\n        }\n\n        return summary\n    }\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        ingred : state.burgerBuilder.ingredients,\n        price : state.burgerBuilder.totalPrice,\n        purchased : state.order.purchased\n    }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport './Input.css';\n\n// The user must pass the atributes the desire to use\nconst Input = (props) => {\n    let input = null;\n    let inputClasses = ['Input','InputElement'];\n    // add the invalid class if an input is invalid\n    if( props.isInvalid && props.shouldValidate && props.touched ){\n        inputClasses.push('Invalid');\n    }\n\n    switch(props.elementType){\n        case('input'):\n            input = <input \n                        className={inputClasses.join(\" \")}\n                        {...props.elementConfig} \n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n        case('textarea'):\n            input = <textarea \n                        className={inputClasses.join(\" \")}\n                        {...props.elementConfig}\n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n        case('select'):\n            input = <select\n                        className={inputClasses.join(\" \")}  \n                        value={props.value}\n                        onChange={props.changed}>\n                        {\n                            props.elementConfig.options.map( option => (\n                                                                <option \n                                                                    key={option.value}\n                                                                    value={option.value}>\n                                                                        {option.displayedValue}\n                                                                </option>)\n                                                            )\n                        }\n                    </select>;\n        break;\n        default:\n            input = <input \n                        className={inputClasses.join(\" \")} \n                        {...props.elementConfig}\n                        value={props.value}\n                        onChange={props.changed} />;\n            break;\n    }\n\n    return(\n        <div className=\"Input\">\n            <label className=\"Label\">{props.label}</label>\n            {input}\n        </div>\n    )\n}\n\nexport default Input;","\n    export const checkValidity = ( value , rules ) => {\n        let isValid = true;\n        if( rules.required ){\n            isValid = value.trim() !== '' && isValid; // making sure that all the required conditions are true\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength  && isValid;\n           \n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength  && isValid;\n        }\n\n        if( rules.isEmail ){\n            const pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n            isValid = pattern.test( value ) && isValid\n        }\n        // check for numeric characters\n        if ( rules.isNumeric ) {\n            const pattern = /^\\d+$/\n            isValid =  pattern.test(value) && isValid \n        }\n\n        return isValid;\n    }\n"],"sourceRoot":""}