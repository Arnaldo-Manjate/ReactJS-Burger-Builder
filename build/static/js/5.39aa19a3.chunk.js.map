{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js"],"names":["Order","ingredients","key","this","props","push","name","amount","ingredientOutput","map","ig","className","price","Component","Orders","state","onFetchOrders","token","userId","orders","loading","Spinner","length","order","createDate","error","connect","auth","dispatch","actions","withErrorHandler","axiosOrders"],"mappings":"8OAkCeA,G,2NAtBP,IAAIC,EAAc,GAClB,IAAK,IAAIC,KAAOC,KAAKC,MAAMH,YAEzBA,EAAYI,KAAK,CACfC,KAAOJ,EACPK,OAASJ,KAAKC,MAAMH,YAAYC,KAIpC,IAAIM,EAAmBP,EAAYQ,KAAK,SAAAC,GAAE,OAAI,0BACGR,IAAKQ,EAAGJ,KACRK,UAAU,eACRD,EAAGJ,KAHR,KAGgBI,EAAGH,WACjE,OACI,yBAAKI,UAAU,SACX,2CAAiBH,EAAjB,KACA,sCAAW,qCAAWL,KAAKC,MAAMQ,a,GAzB7BC,c,gCCOdC,E,4MACFC,MAAQ,G,kEAQNZ,KAAKC,MAAMY,cAAcb,KAAKC,MAAMa,MAAQd,KAAKC,MAAMc,U,+BAMrD,IAAIC,EAAS,wBAAIR,UAAU,YAAd,sBAA4C,6BAA5C,2DAgBb,OAfIR,KAAKC,MAAMgB,QACbD,EAAS,kBAACE,EAAA,EAAD,MAENlB,KAAKC,MAAMe,OAAOG,OAAS,IAC5BH,EAAShB,KAAKC,MAAMe,OAAOV,KAAK,SAAAc,GAC9B,OAAQ,kBAAC,EAAD,CACErB,IAAKqB,EAAMC,WACXZ,MAAOW,EAAMX,MACbX,YAAasB,EAAMtB,kBAKhCE,KAAKC,MAAMqB,QAAON,EAAS,IAG5B,yBAAKR,UAAU,UACZQ,O,GAjCQN,aAuDNa,uBAhBS,SAAAX,GACtB,MAAO,CACLI,OAASJ,EAAMQ,MAAMJ,OACrBM,MAAQV,EAAMQ,MAAME,MACpBL,QAAUL,EAAMQ,MAAMH,QACtBH,MAAQF,EAAMY,KAAKV,MACnBC,OAASH,EAAMY,KAAKT,WAIG,SAAAU,GACzB,MAAO,CACLZ,cAAgB,SAACC,EAAQC,GAAT,OAAoBU,EAAUC,IAAoBZ,EAAOC,QAI9DQ,CAA+CI,YAAiBhB,EAAOiB","file":"static/js/5.39aa19a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Order.css';\n\nclass Order extends Component {\n\n    componentDidMount() {\n   \n     \n    }\n\n    render(){\n\n        let ingredients = []\n        for( let key in this.props.ingredients){\n          // push an object with custom names { amout : 1, name : 'cheese' }\n          ingredients.push({\n            name : key,\n            amount : this.props.ingredients[key]\n          });\n        }\n\n        let ingredientOutput = ingredients.map( ig => <span\n                                                         key={ig.name}\n                                                         className=\"Ingredients\"\n                                                         >{ig.name}: {ig.amount}</span>)\n        return (\n            <div className=\"Order\">\n                <p>Ingredients :{ingredientOutput} </p>\n                <p>Price : <strong>R {this.props.price}</strong></p>\n            </div>\n        )\n    }\n} \n\nexport default Order;","import React, { Component } from 'react';\nimport './Orders.css';\n// components\nimport axiosOrders from  '../../axios/axiosOrders';\nimport Order from '../../components/Order/Order';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index'\nimport { connect } from 'react-redux'\n\nclass Orders extends Component {\n    state = {\n      // orders : [],\n      // loading : false,\n      // error : false\n    }\n\n    componentDidMount() {\n      // get the orders from the Database\n      this.props.onFetchOrders(this.props.token , this.props.userId)\n    }\n\n    render(){\n        // show spinner while the http request is being made then check length \n        // if no order is returned let the User Know that they can place an Order\n        let orders = <h2 className=\"NoOrders\">You have No Orders <br/>Navigate to the Burger Builder screen to place an Order</h2>;\n        if( this.props.loading ){\n          orders = <Spinner />;\n        }else{\n          if(this.props.orders.length > 0){\n            orders = this.props.orders.map( order => {\n              return  <Order \n                        key={order.createDate}\n                        price={order.price} \n                        ingredients={order.ingredients}/> // an object is not a valid childs\n            } )\n          }\n        }\n         // hide no Orders message on error\n        if(this.props.error) orders = [];\n        \n        return(\n          <div className=\"Orders\">\n            {orders}\n          </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders : state.order.orders,\n    error : state.order.error,\n    loading : state.order.loading,\n    token : state.auth.token,\n    userId : state.auth.userId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders : (token , userId) => dispatch( actions.fetchOrders(token, userId) )\n  }\n}\n\nexport default connect( mapStateToProps ,mapDispatchToProps )(withErrorHandler(Orders,axiosOrders));"],"sourceRoot":""}